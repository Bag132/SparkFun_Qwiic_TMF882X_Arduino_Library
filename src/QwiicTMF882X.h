#ifndef _SPARKFUN_TMF882X_H_
#define _SPARKFUN_TMF882X_H_


#include "TMF_COMMS/TMF_COMMS.h"

#define TMF_DEF_ADDR 0x41
#define START_MEAS 0x10


enum TMF882X_ERROR {
  TMF882X_SUCCESS = 0x00,
  TMF882X_GEN_ERROR = 0xFF
};

enum TMF882X_REGISTERS {
  TMF882X_APPID_MAJOR = 0x00, 
  TMF882X_APPID_MINOR, 
  TMF882X_PATCH, 
  TMF882X_BUILD_TYPE, 
  TMF882X_APP_STAT, 
  TMF882X_MEAS_STAT, 
  TMF882X_ALGO_STAT, 
  TMF882X_CALIB_STAT,
  TMF882X_CMD_STAT,
  TMF882X_PREV_CMD,
  TMF882X_MODE, //TMF8828 ONLY
  TMF882X_LIVE_BEAT,
  TMF882X_LIVE_GPIO,
  TMF882X_SER_NUM_ZERO,
  TMF882X_SER_NUM_ONE,
  TMF882X_SER_NUM_TWO,
  TMF882X_SER_NUM_THREE,
  TMF882X_CONFIG_RESULT,
  TMF882X_TID,
  TMF882X_SIZE_LSB,
  TMF882X_SIZE_MSB,
  TMF882X_RES_NUM,
  TMF882X_TEMP, // 0x25
  TMF882X_NUM_VAL_RES,
  TMF882X_AMB_ZERO,
  TMF882X_AMB_ONE,
  TMF882X_AMB_TWO,
  TMF882X_AMB_THREE,
  TMF882X_PHOTON_ZERO,
  TMF882X_PHOTON_ONE,
  TMF882X_PHOTON_TWO,
  TMF882X_PHOTON_THREE,
  TMF882X_REF_COUNT_ZERO,
  TMF882X_REF_COUNT_ONE,
  TMF882X_REF_COUNT_TWO,
  TMF882X_REF_COUNT_THREE,
  TMF882X_SYS_TICK_ZERO,
  TMF882X_SYS_TICK_ONE,
  TMF882X_SYS_TICK_TWO,
  TMF882X_SYS_TICK_THREE,
  TMF882X_RES_CONF_ZERO,
  TMF882X_RES_DIST_ZERO_LSB,
  TMF882X_RES_DIST_ZERO_MSB,
  TMF882X_RES_CONF_ONE,
  TMF882X_RES_DIST_ONE_LSB,
  TMF882X_RES_DIST_ONE_MSB,
  //................0xA3
  TMF882X_PER_MS_LSB,
  TMF882X_PER_MS_MSB,
  TMF882X_KILO_ITER_LSB,
  TMF882X_KILO_ITER_MSB,
  TMF882X_INT_THRESH_LOW_LSB,
  TMF882X_INT_THRESH_LOW_MSB,
  TMF882X_INT_THRESH_HIGH_LSB,
  TMF882X_INT_THRESH_HIGH_MSB,
  TMF882X_INT_ZONE_MASK_ZERO,
  TMF882X_INT_ZONE_MASK_ONE,
  TMF882X_INT_ZONE_MASK_TWO,
  TMF882X_INT_PERSIST,
  TMF882X_CONF_THRESH,
  TMF882X_GPIO_ZERO,
  TMF882X_GPIO_ONE,
  TMF882X_POWER_CFG,
  TMF882X_SPAD_MAP_ID,
  TMF882X_ALG_SET_ZERO,
  //....RESERVERD 0x36 - 0x38
  TMF882X_HIST_DUMP,
  TMF882X_I2C_ADDR,
  TMF882X_OSC_TRIM_LSB,
  TMF882X_OSC_TRIM_MSB,
  TMF882X_I2C_CHANGE,
  //......SPAD REGS SKIPPED
  //.....CROSSTALK REGS SKIPPED  
  TMF882X_ENABLE = 0xE0,
  TMF882X_INT_STATUS,
  TMF882X_INT_ENAB,
  TMF882X_DEVICE_ID,
  TMF882X_REV_ID,

};

class QwiicTMF882X : public TMF_COMMS
{  
  public:
    
    QwiicTMF882X(); 

    bool begin(uint8_t address = TMF_DEF_ADDR, TwoWire &wirePort = Wire); // begin function
    bool beginSpi(uint8_t userCsPin, uint32_t spiPortSpeed = 10000000, SPIClass &spiPort = SPI);
    uint16_t getAppID();
    uint8_t getDeviceID();
    uint8_t getDeviceStatus();
    uint8_t getTemp();
		uint8_t getAppStatus();
		uint8_t getMeasStat();
		bool setCommand(uint8_t);
		bool enableApp();
		bool powerSelect(uint8_t);
		bool setImage(uint8_t*);
		uint8_t getCommandStat(uint8_t commandVals[], uint8_t);
		bool issueReset();

  private:
    
    uint8_t _address;
    
};
#endif
